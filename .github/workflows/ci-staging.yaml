name: Deploy iOS & android for testing
on:
  pull_request:
    branches:
      - staging
    types:
      - closed
jobs:
  # build_ios:
  #   name: Build Flutter (iOS)
  #   runs-on: macos-latest
  #   steps:
  #     - name: check Xcode version
  #       run: /usr/bin/xcodebuild -version

  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Install Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: "stable"
  #     - name: Setup Fastlane
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: "2.6"
  #         bundler-cache: true
  #     - name: Get Flutter dependencies
  #       run: |
  #         flutter pub get
  #         bundle exec fastlane bump_version push:false branch:${{ github.ref_name }}

  #     - name: Install the Apple certificate and provisioning profile
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #         # import certificate and provisioning profile from secrets
  #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
  #         echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH

  #         # apply provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

  #     - name: build archive
  #       run: |
  #         # Go to the iOS directory of the Flutter project
  #         cd ios

  #         # Build the app for iOS
  #         flutter build ios --release --no-codesign

  #         xcodebuild -scheme "Runner" \
  #         -archivePath $RUNNER_TEMP/Runner.xcarchive \
  #         -sdk iphoneos \
  #         -configuration Release \
  #         -destination generic/platform=iOS \
  #         clean archive

  #     - name: export ipa
  #       env:
  #         EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
  #       run: |
  #         EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
  #         echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
  #         xcodebuild -exportArchive -archivePath $RUNNER_TEMP/Runner.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

  #     - name: Upload application
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: iOS-Artifact
  #         path: ${{ runner.temp }}/build/my_app.ipa
  #         # you can also archive the entire directory
  #         # path: ${{ runner.temp }}/build
  #         retention-days: 3

  build_android:
    name: Build Flutter (Android)
    runs-on: ubuntu-latest
    steps:
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter doctor -v
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Dart Language
        uses: dart-lang/setup-dart@v1.3
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.6"
          bundler-cache: true
          working-directory: android
      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > fastlane/upload-keystore.jks
          echo "storeFile=fastlane/upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      - name: Build apk
        run: bundle exec fastlane android build_release_apk
        working-directory: android

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: android-app
          path: ${{ runner.temp }}/build/app/outputs/bundle/release/app-release.aab
          # you can also archive the entire directory
          # path: ${{ runner.temp }}/build
          retention-days: 3

  commit_version_bump:
    name: Commit Version Bump
    needs: [build_ios, build_android]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.6"
          bundler-cache: true
      - name: Bump version via fastlane
        run: bundle exec fastlane bump_version push:true branch:${{ github.ref_name }}
